version: 2.1
jobs:
  build-and-test:
    docker:
      - image: ubuntu:20.04
    steps:
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get install -y git cmake g++-10
      - checkout
      - run:
          name: Install the package
          environment:
            CC: gcc-10
            CXX: g++-10
          command: |
            mkdir build
            cd build
            cmake ../ -DINSTALL_TESTS=ON -DCMAKE_CXX_COMPILER=${CXX}
            make install
            cd ..
      - run:
          name: Run the main tests
          command: |
            ./build/test/cpp/test_all
            ./build/test/cpp/test_keywords
            ./build/test/cpp/test_members
            ./build/test/cpp/test_signature
            ./build/test/cpp/test_smart_enum
            ./build/test/cpp/test_types
            ./build/test/cpp/test_values
      - run:
          name: Test the installation of a CMake dependent project
          environment:
            CC: gcc-10
            CXX: g++-10
          command: |
            mkdir test/cmake/build
            cd test/cmake/build
            cmake ../ -DCMAKE_INSTALL_PREFIX=../../../build/cmake -DCMAKE_CXX_COMPILER=${CXX}
            make
            ./main
  format:
    docker:
      - image: ubuntu:20.04
    steps:
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            apt-get install -y git clang-format-10
      - checkout
      - run:
          name: Check C++ format
          environment:
            CLANG_FORMAT: clang-format-10
          command: ${CLANG_FORMAT} $(find ./ -regex "\./\(include\|test\).*\(hpp\|cpp\)" -type f) --dry-run --Werror
  changelogs:
    docker:
      - image: ubuntu:20.04
    steps:
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            apt-get install -y git ruby
            ruby --version
            gem install github_changelog_generator -v 1.15.2
            mkdir -p /tmp/deployment/changelogs
      - checkout
      - run:
          name: Generate changelogs
          command: |
            # Define the new and previous tags
            export NEW_TAG=v$(cat version.txt)
            if [[ ! ${NEW_TAG} =~ "dev" ]]; then export EXCLUDE_PATTERN='*dev*'; fi
            export LATEST_TAG=$(git describe --tags $(git rev-list --exclude=${EXCLUDE_PATTERN} --tags --max-count=1))
            if [[ -z ${NEW_TAG} || -z ${LATEST_TAG} ]]; then exit 1; fi
            # Display the tags
            echo "Using tags: ${NEW_TAG} (new) ${LATEST_TAG} (latest)"
            # Change the name of the tag if we are not in master
            if [ ${CIRCLE_BRANCH} != master ]; then export RELEASE_TAG=devel-${NEW_TAG}; else export RELEASE_TAG=${NEW_TAG}; fi
            echo ${RELEASE_TAG} >> /tmp/deployment/tag.txt
            # Generate the changelogs
            github_changelog_generator -u mramospe -p mpt -o /tmp/deployment/changelogs/${NEW_TAG}-changelog.md --since-tag ${LATEST_TAG} --future-release ${NEW_TAG} -t ${GITHUB_TOKEN}
            github_changelog_generator -u mramospe -p mpt -o /tmp/deployment/changelogs/${NEW_TAG}-full-changelog.md --since-tag v0.0.0 --future-release ${NEW_TAG} -t ${GITHUB_TOKEN}
      - persist_to_workspace:
          root: /tmp
          paths:
            - deployment
  deploy:
    docker:
      - image: cibuilds/github:0.10
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Publish release
          command: |
            ghr -delete -replace -draft -t ${GITHUB_TOKEN} -u mramospe -r mpt -c ${CIRCLE_SHA1} $(cat /tmp/deployment/tag.txt) /tmp/deployment/changelogs/
  documentation:
    docker:
      - image: ubuntu:20.04
    steps:
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC apt-get install -y git graphviz doxygen
      - checkout
      - run:
          name: Build documentation
          command: doxygen
      - persist_to_workspace:
          root: doc
          paths:
            - html
  gh-pages:
    docker:
      - image: node:8.10.0
    steps:
      - checkout
      - attach_workspace:
          at: doc
      - run:
          name: Install dependencies
          command: |
            # Install the provider
            npm install -g --silent gh-pages@2.0.1
            # Define the Git configuration
            git config --local user.name "Miguel Ramos Pernas"
            git config --local user.email "miguel.ramos.pernas@gmail.com"
      - run:
          name: Deploy documentation
          command: gh-pages -u mramospe -r mpt --dotfiles --message "documentation updated from the CI" --dist docs/html


filters-ci: &filters-ci
  filters:
    branches:
      only:
        - master
        - devel
        - change-ci-provider

workflows:
  version: 2
  test:
    jobs:
      - build-and-test:
          <<: *filters-ci
      - format:
          <<: *filters-ci
  deploy:
    jobs:
      - changelogs
      - deploy:
          <<: *filters-ci
          requires:
            - changelogs
      - documentation
      - gh-pages:
          requires:
            - documentation
          filters:
            branches:
              only:
                - master
                - change-ci-provider
